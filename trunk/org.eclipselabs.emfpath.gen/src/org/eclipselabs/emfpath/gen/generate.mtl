[comment encoding = 'UTF-8'/]
[module generate('http://www.eclipse.org/emf/2002/GenModel', 'http://www.eclipse.org/emf/2002/Ecore')/]

[import org::eclipselabs::emfpath::gen::naming /]
[import org::eclipselabs::emfpath::gen::typing /]
[import org::eclipselabs::emfpath::gen::imports /]
[import org::eclipselabs::emfpath::gen::primitives /]

[template public gen(e : GenClass) ? (ecoreClass.instanceTypeName.oclIsUndefined() or ecoreClass.instanceTypeName.trim() = '')]
[file (generatedFullFilename(), false, 'UTF-8')]
package [genPackage.generatedQualifiedJavaName()/];

[genImports()/]

public class [generatedClassName()/] {

	[genFeatures->select(not ecoreFeature.eType.oclIsUndefined()).gen()->excluding('')->sep('\n\n\t')/]
	
	[genOperations->select(not ecoreOperation.eType.oclIsUndefined()).gen()->excluding('')->sep('\n\n\t')/]

}
[/file]
[/template]

[template public gen(e : GenFeature) ? (willGeneratePredicate()) post (trim())]
	public static final Predicate<[genClass.javaName()/]> [predicateName()/] = new Predicate<[genClass.javaName()/]>() {
		public boolean apply([genClass.javaName()/] s) {
			return s.[getterName()/]();
		}
	};
[/template]

[template public gen(e : GenFeature) ? (not willGeneratePredicate()) post (trim())]
	public static final Function<[genClass.javaName()/], [typeName().wrap()/]> [functionName()/] = new Function<[genClass.javaName()/], [typeName().wrap()/]>() {
		public [typeName().wrap()/] apply([genClass.javaName()/] s) {
			return s.[getterName()/]();
		}
	};
[/template]

[template public gen(e : GenOperation) ? (willGeneratePredicate() and genParameters->size() = 0) post (trim())]
	public static Predicate<[genClass.javaName()/]> [predicateName()/] = new Predicate<[genClass.javaName()/]>() {
		public boolean apply([genClass.javaName()/] s) {
			return s.[operationName()/]();
		}
	};
[/template]

[template public gen(e : GenOperation) ? (not willGeneratePredicate() and genParameters->size() = 0) post (trim())]
	public static Function<[genClass.javaName()/], [typeName().wrap()/]> [functionName()/] = new Function<[genClass.javaName()/], [typeName().wrap()/]>() {
		public [typeName().wrap()/] apply([genClass.javaName()/] s) {
			return s.[operationName()/]();
		}
	};
[/template]

[template public gen(e : GenOperation) ? (willGeneratePredicate() and genParameters->size() > 0) post (trim())]
	public static Predicate<[genClass.javaName()/]> [predicateName()/]([genParameters.declaration()->sep(', ')/]) {
		return new Predicate<[genClass.javaName()/]>() {
			public boolean apply([genClass.javaName()/] s) {
				return s.[operationName()/]([genParameters.gen()->sep(', ')/]);
			}
		};
	}
[/template]

[template public gen(e : GenOperation) ? (not willGeneratePredicate() and genParameters->size() > 0) post (trim())]
	public static Function<[genClass.javaName()/], [typeName().wrap()/]> [functionName()/]([genParameters.declaration()->sep(', ')/]) {
		return new Function<[genClass.javaName()/], [typeName().wrap()/]>() {
			public [typeName().wrap()/] apply([genClass.javaName()/] s) {
				return s.[operationName()/]([genParameters.gen()->sep(', ')/]);
			}
		};
	}
[/template]

[template public declaration(e : GenParameter) post(trim())]
final [typeName()/] [ecoreParameter.name/]
[/template]

[template public gen(e : GenParameter)]
[ecoreParameter.name/]
[/template]
