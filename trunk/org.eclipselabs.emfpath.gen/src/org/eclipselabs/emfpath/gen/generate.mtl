[comment encoding = 'UTF-8'/]
[module generate('http://www.eclipse.org/emf/2002/GenModel', 'http://www.eclipse.org/emf/2002/Ecore')/]

[import org::eclipselabs::emfpath::gen::naming /]
[import org::eclipselabs::emfpath::gen::typing /]
[import org::eclipselabs::emfpath::gen::imports /]
[import org::eclipselabs::emfpath::gen::primitives /]
[import org::eclipselabs::emfpath::gen::utils /]

[template public gen(e : GenClass) ? (ecoreClass.instanceTypeName.oclIsUndefined() or ecoreClass.instanceTypeName.trim() = '')]
[file (generatedFullFilename(), false, 'UTF-8')]
package [genPackage.generatedQualifiedJavaName()/];

[genImports()/]

/**
 * @generated
 */
public final class [generatedClassName()/] {

	/**
	 * @generated
	 */
	private [generatedClassName()/]() {
		// prevent instantiation
	}

	[allGenFeatures().gen(e)->excluding('')->sep('\n\n\t')/]
	
	[allGenOperations().gen(e)->excluding('')->sep('\n\n\t')/]

}
[/file]
[/template]

[template public gen(e : GenFeature, c : GenClass) ? (genClass = c and willGeneratePredicate()) post (trim())]
/**
 * @generated
 */
public static final Predicate<[genClass.javaName()/]> [predicateName()/] = new Predicate<[genClass.javaName()/]>() {
	public boolean apply([genClass.javaName()/] s) {
		return s.[getterName()/]();
	}
};
[/template]

[template public gen(e : GenFeature, c : GenClass) ? (genClass = c and not willGeneratePredicate()) post (trim())]
/**
 * @generated
 */
public static final Function<[genClass.javaName()/], [typeName().wrap()/]> [functionName()/] = new Function<[genClass.javaName()/], [typeName().wrap()/]>() {
	public [typeName().wrap()/] apply([genClass.javaName()/] s) {
		return s.[getterName()/]();
	}
};
[/template]

[template public gen(e : GenOperation, c : GenClass) ? (genClass = c and willGeneratePredicate() and genParameters->size() = 0) post (trim())]
/**
 * @generated
 */
public static final Predicate<[genClass.javaName()/]> [predicateName()/] = new Predicate<[genClass.javaName()/]>() {
	public boolean apply([genClass.javaName()/] s) {
		return s.[operationName()/]();
	}
};
[/template]

[template private genBody(e : GenOperation) ? (ecoreOperation.eExceptions->isEmpty() and not ecoreOperation.eType.oclIsUndefined()) post (trim())]
	return s.[operationName()/]([genParameters.gen()->sep(', ')/]);
[/template]

[template private genBody(e : GenOperation) ? (not ecoreOperation.eExceptions->isEmpty() and  not ecoreOperation.eType.oclIsUndefined())]
try {
	return s.[operationName()/]([genParameters.gen()->sep(', ')/]);
} [e.ecoreOperation.eExceptions.exceptionCatch(e)->sep('\n')/]
[/template]

[template private genBody(e : GenOperation) ? (ecoreOperation.eExceptions->isEmpty() and ecoreOperation.eType.oclIsUndefined())]
s.[operationName()/]([genParameters.gen()->sep(', ')/]);
return s;
[/template]

[template private genBody(e : GenOperation) ? (not ecoreOperation.eExceptions->isEmpty() and ecoreOperation.eType.oclIsUndefined())]
try {
	s.[operationName()/]([genParameters.gen()->sep(', ')/]);
	return s;
} [e.ecoreOperation.eExceptions.exceptionCatch(e)->sep('\n')/]
[/template]

[template private exceptionCatch(e : EClassifier, go : GenOperation)]
catch ([javaName()/] e[go.ecoreOperation.eExceptions->indexOf(e)/]) {
	throw new WrappedException(e[go.ecoreOperation.eExceptions->indexOf(e)/]);
}
[/template]

[template public gen(e : GenOperation, c : GenClass) ? (genClass = c and not willGeneratePredicate() and genParameters->size() = 0) post (trim())]
/**
 * @generated
 */
public static final Function<[genClass.javaName()/], [typeName().wrap()/]> [functionName()/] = new Function<[genClass.javaName()/], [typeName().wrap()/]>() {
	public [typeName().wrap()/] apply([genClass.javaName()/] s) {
		[e.genBody()/]
	}
};
[/template]

[template public gen(e : GenOperation, c : GenClass) ? (genClass = c and willGeneratePredicate() and genParameters->size() > 0) post (trim())]
/**
 * @generated
 */
public static Predicate<[genClass.javaName()/]> [predicateName()/]([genParameters.declaration()->sep(', ')/]) {
	return new Predicate<[genClass.javaName()/]>() {
		public boolean apply([genClass.javaName()/] s) {
			[e.genBody()/]
		}
	};
}
[/template]

[template public gen(e : GenOperation, c : GenClass) ? (genClass = c and not willGeneratePredicate() and genParameters->size() > 0) post (trim())]
/**
 * @generated
 */
public static Function<[genClass.javaName()/], [typeName().wrap()/]> [functionName()/]([genParameters.declaration()->sep(', ')/]) {
	return new Function<[genClass.javaName()/], [typeName().wrap()/]>() {
		public [typeName().wrap()/] apply([genClass.javaName()/] s) {
			[e.genBody()/]
		}
	};
}
[/template]

[template public gen(e : GenFeature, c : GenClass) ? (genClass <> c and willGeneratePredicate()) post (trim())]
/**
 * @generated
 */
public static final Predicate<[genClass.javaName()/]> [predicateName()/] = [genClass.generatedClassName()/].[predicateName()/];
[/template]

[template public gen(e : GenFeature, c : GenClass) ? (genClass <> c and not willGeneratePredicate()) post (trim())]
/**
 * @generated
 */
public static final Function<[genClass.javaName()/], [typeName().wrap()/]> [functionName()/] = [genClass.generatedClassName()/].[functionName()/];
[/template]

[template public gen(e : GenOperation, c : GenClass) ? (genClass <> c and willGeneratePredicate() and genParameters->size() = 0) post (trim())]
/**
 * @generated
 */
public static final Predicate<[genClass.javaName()/]> [predicateName()/] = [genClass.generatedClassName()/].[predicateName()/];
[/template]

[template public gen(e : GenOperation, c : GenClass) ? (genClass <> c and not willGeneratePredicate() and genParameters->size() = 0) post (trim())]
/**
 * @generated
 */
public static final Function<[genClass.javaName()/], [typeName().wrap()/]> [functionName()/] = [genClass.generatedClassName()/].[functionName()/];
[/template]

[template public gen(e : GenOperation, c : GenClass) ? (genClass <> c and willGeneratePredicate() and genParameters->size() > 0) post (trim())]
/**
 * @generated
 */
public static Predicate<[genClass.javaName()/]> [predicateName()/]([genParameters.declaration()->sep(', ')/]) {
	return [genClass.generatedClassName()/].[predicateName()/]([genParameters.gen()->sep(', ')/]);
}
[/template]

[template public gen(e : GenOperation, c : GenClass) ? (genClass <> c and not willGeneratePredicate() and genParameters->size() > 0) post (trim())]
/**
 * @generated
 */
public static Function<[genClass.javaName()/], [typeName().wrap()/]> [functionName()/]([genParameters.declaration()->sep(', ')/]) {
	return [genClass.generatedClassName()/].[operationName()/]([genParameters.gen()->sep(', ')/]);
}
[/template]

[template private declaration(e : GenParameter) post(trim())]
final [typeName()/] [gen()/]
[/template]

[template private gen(e : GenParameter)]
[ecoreParameter.name/]
[/template]
