[comment encoding = UTF-8 /]
[module imports('http://www.eclipse.org/emf/2002/GenModel', 'http://www.eclipse.org/emf/2002/Ecore')/]

[import org::eclipselabs::emfpath::gen::naming /]
[import org::eclipselabs::emfpath::gen::typing /]


[template public genImports(e : GenClass) post(trim())]
[if (not (genFeatures->select(not willGeneratePredicate())->isEmpty() and genOperations->select(not willGeneratePredicate())->isEmpty()))]
import com.google.common.base.Function;	
[/if]
[if (not (genFeatures->select(willGeneratePredicate())->isEmpty() and genOperations->select(willGeneratePredicate())->isEmpty()))]
import com.google.common.base.Predicate;	
[/if]
[if (not (genFeatures.ecoreFeature->select(many)->isEmpty() and genOperations.ecoreOperation->select(many)->isEmpty()))]
	[if (genPackage.genModel.suppressEMFTypes)]
import java.util.List;
	[else]
import org.eclipse.emf.common.util.EList;
	[/if]
[/if]

	[for (eClassifier : EClassifier | ecoreClass.eAllContents(ETypedElement)->select(not eType.oclIsUndefined()).eType->including(ecoreClass)->asOrderedSet()->select(oclIsKindOf(EClass) or oclIsKindOf(EEnum)))]
[eClassifier.genImport(eClassifier.getGenPackage(e.eContainer(GenModel)))/]
	[/for]
[/template]

[template public genImport(e : EClassifier, basePackage : GenPackage) ? (not e.instanceTypeName.oclIsUndefined() and e.instanceTypeName = 'java.util.Map$Entry' ) post(trim())]
	[if (basePackage.eContainer(GenModel).suppressEMFTypes)]
		import java.util.Map;
	[else]
		import org.eclipse.emf.common.util.EMap;
	[/if]
[/template]

[template public genImport(e : EClassifier, basePackage : GenPackage) post(trim())]
import [basePackage.qualifiedJavaName()/].[name/];
[/template]

[query public getGenPackage(toFind : EClassifier, genModel : GenModel) : GenPackage =  
	if (not genModel.eAllContents(GenClass)->select(ecoreClass = toFind)->isEmpty()) then
		genModel.eAllContents(GenClass)->any(ecoreClass = toFind).genPackage
	else 
		if (not genModel.eAllContents(GenEnum)->select(ecoreEnum = toFind)->isEmpty()) then
			genModel.eAllContents(GenEnum)->any(ecoreEnum = toFind).genPackage
		else
			if (not genModel.usedGenPackages->isEmpty()) then
				genModel.usedGenPackages.eAllContents(GenClass)->any(ecoreClass = toFind).genPackage
			else
				genModel.genPackages->first()
			endif
		endif
	endif
/]
